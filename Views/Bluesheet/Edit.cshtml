@model GendacBluesheet.bluesheetdocument

@{
    ViewBag.Title = "Edit";
}

<script src="~/Scripts/edit.js"></script>
   

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <h1>Blue Sheet</h1>
    <div class="card">
        <div class="card-header">
            <h2 class="mb-0" data-toggle="collapse" href="#singleSO">Single Sales Objective</h2>
        </div>

        <div id="singleSO" class="collapse p-3 show">
            <div class="form-group">
                <label for="compName">Company Name</label>
                <div class="input-group">
                    @Html.EditorFor(model => model.compName, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                    <div class="input-group-append">
                        
                    </div>
                </div>
                
            </div>
            <div class="form-group">
                <label for="oppType">What is the opportunity?</label>
                <div class="input-group">
                    @Html.EditorFor(model => model.oppType, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                </div>
                
            </div>
            <div class="form-row">
                <div class="col">
                    <label for="oppSize">Size of the opportunity</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">R</span>
                        </div>
                        @Html.EditorFor(model => model.oppSize, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                    </div>

                </div>
                <div class="col">
                    <label for="oppTime">Timing for the opportunity</label>
                    <div class="input-group">
                        @Html.EditorFor(model => model.oppTime, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h2 class="mb-0" data-toggle="collapse" href="#rateClient">Rate the Client</h2>
        </div>

        <div id="rateClient" class="collapse p-3">

            <div class="form-group row">
                <div class="col-5 mr-5">
                    <label for="turnOver">What is the turnover?</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">R</span>
                        </div>
                        @Html.EditorFor(model => model.turnOver, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                    </div>
                </div>
                <div class="col">
                    <label for="clientAge">How long have they been in business?</label>
                    <div class="input-group">
                        @Html.EditorFor(model => model.clientAge, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                        <div class="input-group-append">
                            <span class="input-group-text">years</span>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group row">
                <div class="col-5 mr-5">
                    <label for="industry">Industry</label>
                    @Html.DropDownListFor(model => model.industry, new List<SelectListItem> {
                                new SelectListItem { Text="Finance", Value="finance" },
                                new SelectListItem { Text="Technology", Value="technology" },
                                new SelectListItem { Text="Manufacturing", Value="manufacturing" },
                                new SelectListItem { Text="Investment", Value="investment" },
                                new SelectListItem { Text="Sales", Value="sales" },
                                new SelectListItem { Text="Production", Value="production" }
                                },
                                new { @Name = "industry", @class = "form-control" })
                    
                </div>

                <div class="col">
                    <label for="clientComp">Who are their competitors?</label>
                    <div class="input-group">
                        @Html.EditorFor(model => model.clientComp, new { htmlAttributes = new { @class = "form-control redFlaggable" } })

                    </div>

                </div>
            </div>

            <div class="form-group row oddRow">
                <label class="col-5 col-form-label">Location</label>
                <div class="btn-group btn-group-justified col px-0" data-toggle="buttons">
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.location, "provinsial")
                        Provincial
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.location, "national")
                        National
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.location, "international")
                        International
                    </label>
                </div>
            </div>

            <div class="form-group row evenRow">
                <label class="col-5 col-form-label">Response Mode</label>
                <div class="btn-group btn-group-justified col px-0" data-toggle="buttons">
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.respMode, "growth")
                        Growth
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.respMode, "trouble")
                        Trouble
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.respMode, "other")
                        Other
                    </label>
                </div>

            </div>


            <div class="form-group row oddRow">
                <label class="col-5 col-form-label">How dependant are they on technology?</label>
                <div class="btn-group btn-group-justified col px-0" data-toggle="buttons">
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.techDependancy, "little")
                        Little
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.techDependancy, "medium")
                        Medium
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.techDependancy, "very")
                        Very
                    </label>
                </div>
            </div>

            <div class="form-group row evenRow">
                <label class="col-5 col-form-label">Are they an advisable client?</label>
                <div class="btn-group btn-group-justified col px-0" data-toggle="buttons">
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.advisable, "little")
                        Little
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.advisable, "medium")
                        Medium
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.advisable, "very")
                        Very
                    </label>
                </div>
            </div>

            <div class="form-group row oddRow">
                <label class="col-5 col-form-label">Have they used external developers?</label>
                <div class="btn-group btn-group-justified col px-0" data-toggle="buttons">
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.extDev, "yes")
                        Yes
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.extDev, "no")
                        No
                    </label>
                    <label class="btn btn-light col-4 m-0 h-100">
                        @Html.RadioButtonFor(model => model.extDev, "unknown")
                        Unknown
                    </label>
                </div>
            </div>

            <div class="form-group mt-3 row">
                <label class="col-6 col-form-label" for="extDevSpend">How much do they spend on external developing?</label>
                <div class="input-group col px-0">
                    <div class="input-group-prepend">
                        <span class="input-group-text">R</span>
                    </div>
                    @Html.EditorFor(model => model.extDevSpend, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h2 class="mb=0" data-toggle="collapse" href="#competitors">Our Competitors for the opportunity</h2>
        </div>

        <div id="competitors" class="collapse p-2">
            <div class="px-2 py-1">
                <h5>Select all that apply:</h5>
            </div>

            <div class="px-3 py-2">
                <div class="form-group row" id="btnOtherComp">
                    <div class="col-6 btn text-left">
                        @{
                            bool check = false;
                            if (Model.otherComp != null)
                            {
                                check = true;
                            }

                        }
                        <input id="otherCompCheck" checked="@check" class="styled-checkbox unchecked" type="checkbox" name="otherCompCheck">
                        <label for="otherCompCheck">Other Company</label>
                    </div>
                    <div class="col">
                        <div class="input-group">
                            @Html.EditorFor(model => model.otherComp, new { htmlAttributes = new { @class = "form-control redFlaggable" } })
                        </div>
                    </div>
                </div>

                <div class="form-group row" id="btnBudgetElse">
                    <div class="col-6 btn text-left">
                        @{
                            check = false;
                            if (Model.budgetElse != null)
                            {
                                check = true;
                            }
                        }
                        <input id="budgetElseCheck" checked="@check" class="styled-checkbox col-6 unchecked" type="checkbox" name="budgetElseCheck">
                        <label for="budgetElseCheck">Use budget for something else</label>
                    </div>
                    <div class="col">
                        <div class="input-group">
                            @Html.EditorFor(model => model.budgetElse, new { htmlAttributes = new { @class = "form-control redFlaggable", id = "budgetElse" } })
                        </div>
                    </div>
                </div>

                <div class="form-group row" id="btnIntResources">
                    <div class="col-6 btn text-left">
                        @{
                            check = false;
                            if (Model.intResources == true)
                            {
                                check = true;
                            }
                        }
                        <input id="intResourcesCheck" checked="@check" class="styled-checkbox col-6 unchecked" type="checkbox" name="intResourcesCheck">
                        <label for="intResourcesCheck">Use internal resources</label>
                    </div>
                    @Html.EditorFor(model => model.intResources, new { htmlAttributes = new { @class = "form-control", id = "intResources", hidden="true" } })
                </div>





                <div class="form-group row" id="btnDoNothing">
                    <div class="col-6 btn text-left">
                        @{
                            check = false;
                            if (Model.doNothing == true)
                            {
                                check = true;
                            }
                        }
                        <input id="doNothingCheck" checked="@check" class="styled-checkbox col-6 unchecked" type="checkbox" name="doNothingCheck">
                        <label for="doNothingCheck">Do Nothing</label>
                    </div>
                    @Html.EditorFor(model => model.doNothing, new { htmlAttributes = new { @class = "form-control", id = "doNothing", hidden="true" } })
                </div>

            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-header">

            <h2 class="mb-0" data-toggle="collapse" href="#buyingInfluences">Buying Influences</h2>
        </div>

        <div id="buyingInfluences" class="collapse p-2">
            <div class="card-body">


                @{ for (var i = 0; i < Model.buyers.Count; ++i)
                    {
                        <div class="form-group row">
                            <div class="col">
                                <label>Buyer Type</label>
                                @{
                                    bool e = false;
                                    bool t = false;
                                    bool u = false;
                                    bool c = false;
                                    switch (Model.buyers.ElementAt(i).buyerType)
                                    {
                                        case "economic":
                                            e = true;
                                            break;
                                        case "technical":
                                            t = true;
                                            break;
                                        case "user":
                                            u = true;
                                            break;
                                        case "coach":
                                            c = true;
                                            break;
                                        default:
                                            break;
                                    }
                                }

                                @Html.DropDownListFor(model => model.buyers.ElementAt(i).buyerType, new List<SelectListItem> {
                                new SelectListItem { Text="Economic", Value="economic", Selected=e },
                                new SelectListItem { Text="Technical", Value="technical", Selected=t },
                                new SelectListItem { Text="User", Value="user", Selected=u },
                                new SelectListItem { Text="Coach", Value="coach", Selected=c },
                                },
                                new { @Name = string.Format("buyers[{0}].buyerType", i), @class = "form-control" })
                            </div>
                            <div class="col">
                                <label for="buyerName">Buyer Name</label>
                                <div class="input-group">
                                    @Html.EditorFor(model => model.buyers.ElementAt(i).buyerName, new { htmlAttributes = new {  @Name = string.Format("buyers[{0}].buyerName", i),
                                                                                                                            @class = "form-control redFlaggable" } })
                                </div>
                            </div>
                            <div class="col">
                                <label for="winRes">Win Result</label>
                                <div class="input-group">
                                    @Html.EditorFor(model => model.buyers.ElementAt(i).winRes, new { htmlAttributes = new {  @Name = string.Format("buyers[{0}].winRes", i),
                                                                                                                        @class = "form-control redFlaggable" } })
                                </div>
                            </div>

                            @Html.EditorFor(model => model.buyers.ElementAt(i).buyerID, new { htmlAttributes = new {  @Name = string.Format("buyers[{0}].buyerID", i),
                                                                                                                        @class = "form-control", hidden="true" } })
                            @Html.EditorFor(model => model.buyers.ElementAt(i).id, new { htmlAttributes = new {  @Name = string.Format("buyers[{0}].id", i),
                                                                                                                        @class = "form-control", hidden="true" } })
                        </div>
                    }
                }
            </div>
        </div>

    </div>

    <div class="card">
        <div class="card-header">
            <h2 class="mb-0" data-toggle="collapse" href="#strengthRF">Strengths and Red Flags</h2>
        </div>

        <div id="strengthRF" class="collapse p-2">
            <div class="card-body">
              
                @{ for (var i = 0; i < Model.strengths.Count; ++i)
                    {
                        <div class="form-group row">
                            <div class="col">
                                @if(i < 1){<label>Strengths</label>}
                                <div class="input-group">
                                    @Html.EditorFor(model => model.strengths.ElementAt(i).strength1, new { htmlAttributes = new {  @Name = string.Format("strengths[{0}].strength1", i),
                                                                                                                            @class = "form-control redFlaggable" } })
                                </div>
                            </div>
                            <div class="col">
                                @if(i < 1){<label>Leverages</label>}
                                <div class="input-group">
                                    @Html.EditorFor(model => model.strengths.ElementAt(i).leverage, new { htmlAttributes = new {  @Name = string.Format("strengths[{0}].leverage", i),
                                                                                                                        @class = "form-control redFlaggable" } })
                                </div>
                            </div>
                        </div>
                    }
                }
            
               

                @{ for (var i = 0; i < Model.redFlags.Count; ++i)
                    {
                        <div class="form-group row">
                            <div class="col">
                                @if(i < 1){<label>Red Flags</label>}
                                <div class="input-group">
                                    @Html.EditorFor(model => model.redFlags.ElementAt(i).redFlag1, new { htmlAttributes = new {  @Name = string.Format("redFlags[{0}].redFlag1", i),
                                                                                                                            @class = "form-control redFlaggable" } })
                                </div>
                            </div>
                            <div class="col">
                                @if(i < 1){<label>Strategies</label>}
                                <div class="input-group">
                                    @Html.EditorFor(model => model.redFlags.ElementAt(i).strategy, new { htmlAttributes = new {  @Name = string.Format("redFlags[{0}].strategy", i),
                                                                                                                        @class = "form-control redFlaggable" } })
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
    
}

<div>
    @Html.ActionLink("Back to List", "Home")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
